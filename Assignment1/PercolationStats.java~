import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.StdStats;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;
import edu.princeton.cs.algs4.StdOut;

public class PercolationStats {
  
  private double[] exp;
  private Percolation perco;
  private int Tnum;
  
  public PercolationStats (int N, int T) //T experiement 
  {
    int count;
    int i;
    int j;
    exp = new double[T];
    Tnum=T;
    
    
    for (int k=0; k<T; k++)
    {
      perco = new Percolation(N);
      count=0;
      StdOut.println("k="+k);
      while (!perco.percolates() && count<N*N)
      {
        i=StdRandom.uniform(N);
        j=StdRandom.uniform(N);
        StdOut.println("i="+i);
        StdOut.println("j="+j);
        if (perco.isFull(i,j)) 
        {
          perco.open(i, j);
          count++;
        }
        StdOut.println("count="+count);
        StdOut.println("perco="+perco.percolates());
        
      }
       StdOut.println("count="+count);
      exp[k]=(double) count/N/N;
      StdOut.println("exp="+exp[k]);
    }
    
    
  }
    public double mean()
    {
      return StdStats.mean(exp);
    }
    public double stddev()
    {
      return StdStats.stddev(exp);
    }
    public double confidenceLo()
    {
      return StdStats.mean(exp)-1.96*StdStats.stddev(exp)/Math.sqrt(Tnum);
    }
    public double confidenceHi()
    {
      return StdStats.mean(exp)+1.96*StdStats.stddev(exp)/Math.sqrt(Tnum);
    }
    
    public static void main(String[] args)
    {
      PercolationStats percosta = new PercolationStats(2,1000);
      StdOut.println("mean ="+ percosta.mean());
      StdOut.println("stddev ="+ percosta.stddev());
      StdOut.println("95% confidence interval ="+ percosta.confidenceLo()+","+percosta.confidenceHi());
    
    }
    

}